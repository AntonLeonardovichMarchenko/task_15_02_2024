/*
В  bootstrapTest_1.html была описана форма заявки и определены алгоритмы сбора вводимой информации.
Чтобы отправить данные на сервер из кода JavaScript передаются отправляемые данные.
Для тестирования отправки используется среда выполнения Javascript Node.js.
Node.js предоставляет набор функций и классов для построения сервера.
Для этого сервера будут использоватся объекты
file, path и url, которые являются модулями Node.js (и это не все модули).
В файле server_0.js содержится определение кода сервера, который принимает данные от
...html клиента - формы bootstrapTest_1.html

createServer() возвращает объект http.Server. Для обработки подключений в метод
createServer передается функция-обработчик (возможно, что это безымянная функция
с двумя параметрами request и response в нотации  (request, response) => {...} ' )

Параметр request позволяет получить информацию о запросе. Он представляет объект
http.IncomingMessage. Основные свойства этого объекта:
= headers: возвращает заголовки запроса
= method: тип запроса (GET, POST, DELETE, PUT)
= url: представляет запрошенный адрес,

Параметр response: управляет отправкой ответа и представляет объект http.ServerResponse.
Его функциональность определяется (в частности) следующими методами:
= statusCode: устанавливает статусный код ответа
= statusMessage: устанавливает сообщение, отправляемое вместе со статусным кодом
= setHeader(name, value): добавляет в ответ один заголовок
= write: пишет в поток ответа некоторое содержимое
= writeHead: добавляет в ответ статусный код и набор заголовков
= end: сигнализирует серверу, что заголовки и тело ответа установлены,
       в итоге ответ отсылается клиенту. Этот метод должен вызываться в каждом запросе.

Чтобы сервер мог обрабатывать входящие подключения он должен 'слушать'.
Для этого у объекта сервера надо вызвать метод listen(). Этот метод может принимать
различный набор параметров.
В качестве первого параметра обычно передаётся номер порта, по которому запускается сервер.
*/

// Импорт необходимых модулей Node.js.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
const favicon = require('serve-favicon');
const express = require('express')

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


const http = require("http"); // модуль для обработки входящих запросов
const fs = require("fs");     // модуль для взаимодействия с файловой системой
const path = require("path"); // модуль для работы с путями файлов и папок
const url = require("url");   // модуль для разрешения и парсинга URL адресов

const PORT = 3000;   // номер порта

// Теперь с помощью функции http.createServer() создётся HTTP-сервер.
// Эта функция возвращает объект http.Server.

const server =  http.createServer(async (request, response) => {
    // это параметры сервера =============================================
    console.log("Url:", request.url);
    console.log("Тип запроса:", request.method);
    console.log("User-Agent:", request.headers["user-agent"]);

    console.log("Все заголовки");
    console.log(request.headers);

    if (request.url == '/server_0.js')
    {  // ===3============================================================
    response.end("Fetch на test_13_02_2024");
    }  // ===3============================================================

/*
Работа с файловыми дескрипторами в Node.js
Прежде чем начать взаимодействовать с файлами, находящимися в файловой системе сервера,
нужно получить дескриптор файла.
Это можно сделать  асинхронным методом для открытия файла open() из модуля fs.
*/


// После получения дескриптора одним из возможных способов можно
// производить с ним необходимые операции.
// Это уже новая заморочка: вообще, есть ли такой файл?
// Это если БЕЗ дескриптора файла. Файл задаётся объектом filePath



    // После запуска сервера
    // node C:\users\...\server_0.js
    // и обращения к нему клиента (смотреть функцию fetch в .html),
    // свойству Url объекта request присваивается значение,
    // из которого определяется имя клиента

    let Url = request.url.substring(1); // вот оно !


     console.log(Url);

    if (Url == 'bootstrapTest_1.html')  // и ни на каких других клиентов сервер не отвлекается
        { // ===1=========================================================
        response.write('fetch from ', Url);
        response.write(Url);
        response.end();
        console.log(Url);

// получение информации о файле в асинхронном режиме - применяется функция stat().
// Первый параметр представляет путь к файлу. Второй, необязательный (!!! его здесь нет)
// параметр представляет объект, у которого свойство bigint хранит логическое значение и
// указывает, надо ли возвратить данные в виде числа (при значении true).
// Третий параметр - функция обратного вызова, которая принимает два параметра (error, stats)
// Первый параметр хранит информацию об ошибке (при ее наличии), второй - статистику файла.
console.log("fileUrl=", Url, "Получение информации в асинхронном режиме");


  // смотрим, есть ли такой файл
  // а здесь вторым параметром задана анонимная функция с двумя параметрами


// Важно! несмотря на то, что функция fs.readFile(...) вызывается первой,
// но так как она асинхронная, она не блокирует поток выполнения, поэтому ее
// результат выводится в самом конце.

// это чтобы сервер НЕ читал favicon!
if (Url !== 'favicon.ico')
{// ===0==================================================================
console.log("fileUrl=", Url, "Асинхронное чтение файлов");
}// ===0==================================================================

    } // ===1=============================================================

});

    server.listen(3000, function(){ console.log(PORT)});
    // сервер запускается и слушает по порту 3000. Дополнительно в метод listen
    // можно передать функцию, которая будет срабатывать при запуске сервера
    // server.listen(3000, function(){ console.log("Сервер запущен. Номер порта:3000")});
    // здесь чуть проще - просто номер порта. По любому - это то, что он выдаёт,
    // когда ему говорят, куда слушать при запуске.











